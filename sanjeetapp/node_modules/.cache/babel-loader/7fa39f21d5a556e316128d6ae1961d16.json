{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hp\\\\Desktop\\\\coding-challenge-frontend\\\\sanjeetapp\\\\src\\\\components\\\\FormControl.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FormControl = props => {\n  _s();\n\n  // fetch api states\n  const [error, setError] = useState(null);\n  const [json, setjson] = useState([]);\n  const [isLoading, setIsLoading] = useState(false); // **\n\n  const [enteredName, setEnteredName] = useState('');\n  const [enteredBody, setEnteredBody] = useState('');\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const [enteredBodyTouched, setEnteredBodyTouched] = useState(false);\n  const enteredNameIsValid = enteredName.trim() !== '';\n  const enteredBodyIsValid = enteredBody.trim() !== '';\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const BodyInputIsInvalid = !enteredBodyIsValid && enteredBodyTouched; // fetch fetch ****************************************************************\n\n  fetch('https://jsonplaceholder.typicode.com/posts', {\n    method: 'POST',\n    body: JSON.stringify({\n      title: 'foo',\n      body: 'bar',\n      userId: 1\n    }),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8'\n    }\n  }).then(response => response.json()).then(json => console.log(json)).then(res => {\n    if (!res.ok) {\n      throw new Error(res.error);\n    }\n\n    return res;\n  }).catch(err => console.log(err));\n\n  function addMovieHandler(movie) {\n    console.log(movie);\n  }\n\n  let content = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Found no movies.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 17\n  }, this);\n\n  if (json.length > 0) {// content = <MoviesList movies={movies} />;\n  }\n\n  if (error) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 15\n    }, this);\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 15\n    }, this);\n  } // ************************************************************************************************\n\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredBodyIsValid) {\n    formIsValid = true;\n  }\n\n  const enteredObject = {\n    title: enteredName,\n    body: enteredBody\n  };\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n  };\n\n  const BodyInputChangeHandler = event => {\n    setEnteredBody(event.target.value);\n  };\n\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true);\n  };\n\n  const BodyInputBlurHandler = event => {\n    setEnteredBodyTouched(true);\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n    setEnteredBodyTouched(true);\n\n    if (!(enteredNameIsValid && enteredBodyIsValid)) {\n      return;\n    }\n\n    console.log(enteredName); // nameInputRef.current.value = ''; => NOT IDEAL, DON'T MANIPULATE THE DOM\n\n    setEnteredName('');\n    setEnteredBody('');\n    setEnteredNameTouched(false);\n    setEnteredBodyTouched(false); // fetch api json placeholder\n\n    console.log(enteredObject);\n  };\n\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n  fetch('https://jsonplaceholder.typicode.com/todos/1').then(response => response.json()).then(json => console.log(json));\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Title must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Body\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: BodyInputChangeHandler,\n        onBlur: BodyInputBlurHandler,\n        value: enteredBody\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), BodyInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Body must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FormControl, \"4eWu8PTK+KMTbm6pI2t+YHicjUY=\");\n\n_c = FormControl;\nexport default FormControl;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormControl\");","map":{"version":3,"sources":["C:/Users/Hp/Desktop/coding-challenge-frontend/sanjeetapp/src/components/FormControl.js"],"names":["React","useState","useEffect","useCallback","FormControl","props","error","setError","json","setjson","isLoading","setIsLoading","enteredName","setEnteredName","enteredBody","setEnteredBody","enteredNameTouched","setEnteredNameTouched","enteredBodyTouched","setEnteredBodyTouched","enteredNameIsValid","trim","enteredBodyIsValid","nameInputIsInvalid","BodyInputIsInvalid","fetch","method","body","JSON","stringify","title","userId","headers","then","response","console","log","res","ok","Error","catch","err","addMovieHandler","movie","content","length","formIsValid","enteredObject","nameInputChangeHandler","event","target","value","BodyInputChangeHandler","nameInputBlurHandler","BodyInputBlurHandler","formSubmissionHandler","preventDefault","nameInputClasses"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAE7B;AAEA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C,CAN6B,CAQ7B;;AAGA,QAAM,CAACW,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACa,WAAD,EAAcC,cAAd,IAAgCd,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACe,kBAAD,EAAqBC,qBAArB,IAA8ChB,QAAQ,CAAC,KAAD,CAA5D;AACA,QAAM,CAACiB,kBAAD,EAAqBC,qBAArB,IAA8ClB,QAAQ,CAAC,KAAD,CAA5D;AAEA,QAAMmB,kBAAkB,GAAGR,WAAW,CAACS,IAAZ,OAAuB,EAAlD;AACA,QAAMC,kBAAkB,GAAGR,WAAW,CAACO,IAAZ,OAAuB,EAAlD;AACA,QAAME,kBAAkB,GAAG,CAACH,kBAAD,IAAuBJ,kBAAlD;AACA,QAAMQ,kBAAkB,GAAG,CAACF,kBAAD,IAAuBJ,kBAAlD,CAnB6B,CAqB/B;;AAIAO,EAAAA,KAAK,CAAC,4CAAD,EAA+C;AAClDC,IAAAA,MAAM,EAAE,MAD0C;AAElDC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,MAAAA,KAAK,EAAE,KADY;AAEnBH,MAAAA,IAAI,EAAE,KAFa;AAGnBI,MAAAA,MAAM,EAAE;AAHW,KAAf,CAF4C;AAOlDC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AAPyC,GAA/C,CAAL,CAWGC,IAXH,CAWSC,QAAD,IAAcA,QAAQ,CAAC1B,IAAT,EAXtB,EAWuCyB,IAXvC,CAW6CzB,IAAD,IAAU2B,OAAO,CAACC,GAAR,CAAY5B,IAAZ,CAXtD,EAWyEyB,IAXzE,CAW8EI,GAAG,IAAI;AAEjF,QAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACV,YAAM,IAAIC,KAAJ,CAAUF,GAAG,CAAC/B,KAAd,CAAN;AACF;;AACD,WAAO+B,GAAP;AACD,GAjBH,EAkBGG,KAlBH,CAkBSC,GAAG,IAAIN,OAAO,CAACC,GAAR,CAAYK,GAAZ,CAlBhB;;AA0BE,WAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9BR,IAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACD;;AAED,MAAIC,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAd;;AAEA,MAAIpC,IAAI,CAACqC,MAAL,GAAc,CAAlB,EAAqB,CACnB;AACD;;AAED,MAAIvC,KAAJ,EAAW;AACTsC,IAAAA,OAAO,gBAAG;AAAA,gBAAItC;AAAJ;AAAA;AAAA;AAAA;AAAA,YAAV;AACD;;AAED,MAAII,SAAJ,EAAe;AACbkC,IAAAA,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAV;AACD,GAnE4B,CAyE/B;;;AAGE,MAAIE,WAAW,GAAG,KAAlB;;AAEA,MAAI1B,kBAAkB,IAAIE,kBAA1B,EAA8C;AAC5CwB,IAAAA,WAAW,GAAG,IAAd;AACD;;AAED,QAAMC,aAAa,GAAG;AACpBjB,IAAAA,KAAK,EAAGlB,WADY;AAEpBe,IAAAA,IAAI,EAAGb;AAFa,GAAtB;;AAKA,QAAMkC,sBAAsB,GAAIC,KAAD,IAAW;AACxCpC,IAAAA,cAAc,CAACoC,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;AAED,GAHD;;AAIA,QAAMC,sBAAsB,GAAIH,KAAD,IAAW;AACxClC,IAAAA,cAAc,CAACkC,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;AACD,GAFD;;AAIA,QAAME,oBAAoB,GAAIJ,KAAD,IAAW;AACtChC,IAAAA,qBAAqB,CAAC,IAAD,CAArB;AACD,GAFD;;AAIA,QAAMqC,oBAAoB,GAAIL,KAAD,IAAW;AACtC9B,IAAAA,qBAAqB,CAAC,IAAD,CAArB;AACD,GAFD;;AAIA,QAAMoC,qBAAqB,GAAIN,KAAD,IAAW;AACvCA,IAAAA,KAAK,CAACO,cAAN;AAEAvC,IAAAA,qBAAqB,CAAC,IAAD,CAArB;AACAE,IAAAA,qBAAqB,CAAC,IAAD,CAArB;;AAEA,QAAI,EAAEC,kBAAkB,IAAIE,kBAAxB,CAAJ,EAAiD;AAC/C;AACD;;AAEDa,IAAAA,OAAO,CAACC,GAAR,CAAYxB,WAAZ,EAVuC,CAYvC;;AACAC,IAAAA,cAAc,CAAC,EAAD,CAAd;AACAE,IAAAA,cAAc,CAAC,EAAD,CAAd;AACAE,IAAAA,qBAAqB,CAAC,KAAD,CAArB;AACAE,IAAAA,qBAAqB,CAAC,KAAD,CAArB,CAhBuC,CAmB3C;;AAWIgB,IAAAA,OAAO,CAACC,GAAR,CAAYW,aAAZ;AACD,GA/BD;;AAiCA,QAAMU,gBAAgB,GAAGlC,kBAAkB,GACvC,sBADuC,GAEvC,cAFJ;AAKEE,EAAAA,KAAK,CAAC,8CAAD,CAAL,CACCQ,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAAC1B,IAAT,EADlB,EAECyB,IAFD,CAEMzB,IAAI,IAAI2B,OAAO,CAACC,GAAR,CAAY5B,IAAZ,CAFd;AAQF,sBACE;AAAM,IAAA,QAAQ,EAAE+C,qBAAhB;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEE,gBAAhB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,EAAE,EAAC,MAFL;AAGE,QAAA,QAAQ,EAAET,sBAHZ;AAIE,QAAA,MAAM,EAAEK,oBAJV;AAKE,QAAA,KAAK,EAAEzC;AALT;AAAA;AAAA;AAAA;AAAA,cAFF,EASGW,kBAAkB,iBACjB;AAAG,QAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAeE;AAAK,MAAA,SAAS,EAAEkC,gBAAhB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,EAAE,EAAC,MAFL;AAGE,QAAA,QAAQ,EAAEL,sBAHZ;AAIE,QAAA,MAAM,EAAEE,oBAJV;AAKE,QAAA,KAAK,EAAExC;AALT;AAAA;AAAA;AAAA;AAAA,cAFF,EASGU,kBAAkB,iBACjB;AAAG,QAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAfF,eA8BE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACE;AAAQ,QAAA,QAAQ,EAAE,CAACsB,WAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YA9BF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoCD,CAzLD;;GAAM1C,W;;KAAAA,W;AA2LN,eAAeA,WAAf","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\n\nconst FormControl = (props) => {\n\n  // fetch api states\n\n  const [error, setError] = useState(null);\n  const [json, setjson] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // **\n\n\n  const [enteredName, setEnteredName] = useState('');\n  const [enteredBody, setEnteredBody] = useState('');\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const [enteredBodyTouched, setEnteredBodyTouched] = useState(false);\n\n  const enteredNameIsValid = enteredName.trim() !== '';\n  const enteredBodyIsValid = enteredBody.trim() !== '';\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const BodyInputIsInvalid = !enteredBodyIsValid && enteredBodyTouched;\n\n// fetch fetch ****************************************************************\n\n\n\nfetch('https://jsonplaceholder.typicode.com/posts', {\n  method: 'POST',\n  body: JSON.stringify({\n    title: 'foo',\n    body: 'bar',\n    userId: 1,\n  }),\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n})\n  .then((response) => response.json()).then((json) => console.log(json)).then(res => {\n    \n    if (!res.ok) {\n       throw new Error(res.error);\n    }\n    return res;\n  })\n  .catch(err => console.log(err));\n \n\n \n\n\n\n\n  function addMovieHandler(movie) {\n    console.log(movie);\n  }\n\n  let content = <p>Found no movies.</p>;\n\n  if (json.length > 0) {\n    // content = <MoviesList movies={movies} />;\n  }\n\n  if (error) {\n    content = <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p>Loading...</p>;\n  }\n\n\n\n\n\n// ************************************************************************************************\n\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredBodyIsValid) { \n    formIsValid = true;\n  }\n\n  const enteredObject = {\n    title : enteredName,\n    body : enteredBody\n  }\n\n  const nameInputChangeHandler = (event) => {\n    setEnteredName(event.target.value);\n  \n  };\n  const BodyInputChangeHandler = (event) => {\n    setEnteredBody(event.target.value);\n  };\n\n  const nameInputBlurHandler = (event) => {\n    setEnteredNameTouched(true);\n  };\n\n  const BodyInputBlurHandler = (event) => {\n    setEnteredBodyTouched(true);\n  };\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n  \n    setEnteredNameTouched(true);\n    setEnteredBodyTouched(true);\n\n    if (!(enteredNameIsValid && enteredBodyIsValid)) {\n      return;\n    }\n  \n    console.log(enteredName);\n\n    // nameInputRef.current.value = ''; => NOT IDEAL, DON'T MANIPULATE THE DOM\n    setEnteredName('');\n    setEnteredBody('');\n    setEnteredNameTouched(false);\n    setEnteredBodyTouched(false);\n\n\n// fetch api json placeholder\n\n\n\n\n\n\n\n\n\n\n    console.log(enteredObject)\n  };\n\n  const nameInputClasses = nameInputIsInvalid\n    ? 'form-control invalid'\n    : 'form-control';\n\n\n    fetch('https://jsonplaceholder.typicode.com/todos/1')\n    .then(response => response.json())\n    .then(json => console.log(json))\n\n\n   \n\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Title</label>\n        <input\n          type='text'\n          id='name'\n          onChange={nameInputChangeHandler}\n          onBlur={nameInputBlurHandler}\n          value={enteredName}\n        />\n        {nameInputIsInvalid && (\n          <p className='error-text'>Title must not be empty.</p>\n        )}\n      </div>\n\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Body</label>\n        <input\n          type='text'\n          id='name'\n          onChange={BodyInputChangeHandler}\n          onBlur={BodyInputBlurHandler}\n          value={enteredBody}\n        />\n        {BodyInputIsInvalid && (\n          <p className='error-text'>Body must not be empty.</p>\n        )}\n      </div>\n\n\n      <div className='form-actions'>\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default FormControl;\n"]},"metadata":{},"sourceType":"module"}
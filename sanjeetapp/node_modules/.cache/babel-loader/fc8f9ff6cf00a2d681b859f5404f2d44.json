{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hp\\\\Desktop\\\\coding-challenge-frontend\\\\sanjeetapp\\\\src\\\\components\\\\FormControl.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport ListPopulate from './ListPopulate';\nimport Emap from './Emap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst dummy_data = [{\n  title: 'a',\n  body: 'ab'\n}, {\n  title: 'ac',\n  body: 'abc'\n}, {\n  title: 'ajh',\n  body: 'aop'\n}];\n\nconst FormControl = props => {\n  _s();\n\n  // json object data states_and_properties\n  const [jsony, setjsony] = useState(dummy_data);\n\n  const addjsonHandler = jsony => {\n    setjsony(prevjsony => {\n      return [jsony, ...prevjsony];\n    });\n  }; // ***********\n  // fetch api states\n\n\n  const [error, setError] = useState(null);\n  const [json, setjson] = useState([]);\n  const [isLoading, setIsLoading] = useState(false); // **\n\n  const [enteredName, setEnteredName] = useState('');\n  const [enteredBody, setEnteredBody] = useState('');\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const [enteredBodyTouched, setEnteredBodyTouched] = useState(false);\n  const enteredNameIsValid = enteredName.trim() !== '';\n  const enteredBodyIsValid = enteredBody.trim() !== '';\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const BodyInputIsInvalid = !enteredBodyIsValid && enteredBodyTouched; // fetch fetch ****************************************************************\n\n  function addMovieHandler(movie) {\n    console.log(movie);\n  }\n\n  let content = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Found no movies.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 17\n  }, this);\n\n  if (json.length > 0) {// content = <MoviesList movies={movies} />;\n  }\n\n  if (error) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 15\n    }, this);\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }, this);\n  } // ************************************************************************************************\n\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredBodyIsValid) {\n    formIsValid = true;\n  }\n\n  const enteredObject = {\n    title: enteredName,\n    body: enteredBody\n  };\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n  };\n\n  const BodyInputChangeHandler = event => {\n    setEnteredBody(event.target.value);\n  };\n\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true);\n  };\n\n  const BodyInputBlurHandler = event => {\n    setEnteredBodyTouched(true);\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n    setEnteredBodyTouched(true);\n\n    if (!(enteredNameIsValid && enteredBodyIsValid)) {\n      return;\n    } // handling errors in fetch with faulty parameters\n\n\n    fetch('https://jsonplaceholder.typicode.com/postijhbvh', {\n      method: 'POST',\n      body: JSON.stringify({\n        title: 'foo',\n        body: 'bar',\n        userId: 1\n      }),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8'\n      }\n    }).then(response => response.json()).then(json => console.log(json)).then(res => {\n      if (!res.ok && res != null) {\n        throw new Error(res.error);\n      }\n\n      return res;\n    }).catch(err => console.log(err + ' : error occured'));\n    console.log(enteredName); // nameInputRef.current.value = ''; => NOT IDEAL, DON'T MANIPULATE THE DOM\n\n    setEnteredName('');\n    setEnteredBody('');\n    setEnteredNameTouched(false);\n    setEnteredBodyTouched(false); // fetch api json placeholder error free\n\n    fetch('https://jsonplaceholder.typicode.com/posts', {\n      method: 'POST',\n      body: JSON.stringify({\n        title: 'foo',\n        body: 'bar',\n        userId: 1\n      }),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8'\n      }\n    }).then(response => response.json()).then(json => console.log(json));\n    console.log(enteredObject);\n  };\n\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control'; // fetch('https://jsonplaceholder.typicode.com/todos/1')\n  // .then(response => response.json())\n  // .then(json => console.log(json))\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: formSubmissionHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: nameInputClasses,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          onChange: nameInputChangeHandler,\n          onBlur: nameInputBlurHandler,\n          value: enteredName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 9\n        }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-text\",\n          children: \"Title must not be empty.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: nameInputClasses,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: \"Body\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          onChange: BodyInputChangeHandler,\n          onBlur: BodyInputBlurHandler,\n          value: enteredBody\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 9\n        }, this), BodyInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-text\",\n          children: \"Body must not be empty.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-actions\",\n        style: {\n          borderBottom: '2px solid green'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: !formIsValid,\n          style: {\n            marginBottom: '23%'\n          },\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginLeft: '13%',\n        display: 'flex',\n        justifyContent: 'space-around',\n        paddingTop: '3em'\n      },\n      children: [/*#__PURE__*/_jsxDEV(ListPopulate, {\n        prop: enteredObject\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(Emap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(FormControl, \"9KhOyGVZFTyxpUaUXvDgxdrG3iQ=\");\n\n_c = FormControl;\nexport default FormControl;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormControl\");","map":{"version":3,"sources":["C:/Users/Hp/Desktop/coding-challenge-frontend/sanjeetapp/src/components/FormControl.js"],"names":["React","useState","useEffect","useCallback","ListPopulate","Emap","dummy_data","title","body","FormControl","props","jsony","setjsony","addjsonHandler","prevjsony","error","setError","json","setjson","isLoading","setIsLoading","enteredName","setEnteredName","enteredBody","setEnteredBody","enteredNameTouched","setEnteredNameTouched","enteredBodyTouched","setEnteredBodyTouched","enteredNameIsValid","trim","enteredBodyIsValid","nameInputIsInvalid","BodyInputIsInvalid","addMovieHandler","movie","console","log","content","length","formIsValid","enteredObject","nameInputChangeHandler","event","target","value","BodyInputChangeHandler","nameInputBlurHandler","BodyInputBlurHandler","formSubmissionHandler","preventDefault","fetch","method","JSON","stringify","userId","headers","then","response","res","ok","Error","catch","err","nameInputClasses","borderBottom","marginBottom","marginLeft","display","justifyContent","paddingTop"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport ListPopulate from './ListPopulate';\nimport Emap from './Emap';\n\n\nconst dummy_data = [\n  {\n    title: 'a',\n    body: 'ab'\n  },\n  {\n    title: 'ac',\n    body: 'abc'\n  },\n  {\n    title: 'ajh',\n    body: 'aop'\n  }\n\n]\n\nconst FormControl = (props) => {\n\n\n// json object data states_and_properties\n\n\nconst [jsony, setjsony] = useState(dummy_data);\n\nconst addjsonHandler = (jsony) => {\n  setjsony((prevjsony) => {\n    return [jsony, ...prevjsony];\n  });\n};\n\n// ***********\n\n\n\n  // fetch api states\n\n  const [error, setError] = useState(null);\n  const [json, setjson] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // **\n\n\n  const [enteredName, setEnteredName] = useState('');\n  const [enteredBody, setEnteredBody] = useState('');\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const [enteredBodyTouched, setEnteredBodyTouched] = useState(false);\n\n  const enteredNameIsValid = enteredName.trim() !== '';\n  const enteredBodyIsValid = enteredBody.trim() !== '';\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const BodyInputIsInvalid = !enteredBodyIsValid && enteredBodyTouched;\n\n// fetch fetch ****************************************************************\n\n\n\n\n \n\n \n\n\n\n\n  function addMovieHandler(movie) {\n    console.log(movie);\n  }\n\n  let content = <p>Found no movies.</p>;\n\n  if (json.length > 0) {\n    // content = <MoviesList movies={movies} />;\n  }\n\n  if (error) {\n    content = <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p>Loading...</p>;\n  }\n\n\n\n\n\n// ************************************************************************************************\n\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredBodyIsValid) { \n    formIsValid = true;\n  }\n\n  const enteredObject = {\n    title : enteredName,\n    body : enteredBody\n  }\n\n  const nameInputChangeHandler = (event) => {\n    setEnteredName(event.target.value);\n  \n  };\n  const BodyInputChangeHandler = (event) => {\n    setEnteredBody(event.target.value);\n  };\n\n  const nameInputBlurHandler = (event) => {\n    setEnteredNameTouched(true);\n  };\n\n  const BodyInputBlurHandler = (event) => {\n    setEnteredBodyTouched(true);\n  };\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n  \n    setEnteredNameTouched(true);\n    setEnteredBodyTouched(true);\n\n    if (!(enteredNameIsValid && enteredBodyIsValid)) {\n      return;\n    }\n\n    // handling errors in fetch with faulty parameters\n    fetch('https://jsonplaceholder.typicode.com/postijhbvh', {\n      method: 'POST',\n      body: JSON.stringify({\n        title: 'foo',\n        body: 'bar',\n        userId: 1,\n      }),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n    })\n      .then((response) => response.json()).then((json) => console.log(json)).then(res => {\n        \n        if (!res.ok && res!=null) {\n           throw new Error(res.error);\n        }\n        return res;\n      })\n      .catch(err => console.log(err+' : error occured'));\n    console.log(enteredName);\n\n    // nameInputRef.current.value = ''; => NOT IDEAL, DON'T MANIPULATE THE DOM\n    setEnteredName('');\n    setEnteredBody('');\n    setEnteredNameTouched(false);\n    setEnteredBodyTouched(false);\n\n\n// fetch api json placeholder error free\n\n\nfetch('https://jsonplaceholder.typicode.com/posts', {\n  method: 'POST',\n  body: JSON.stringify({\n    title: 'foo',\n    body: 'bar',\n    userId: 1,\n  }),\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n})\n  .then((response) => response.json())\n  .then((json) => console.log(json));\n\n\n\n\n\n\n\n    console.log(enteredObject)\n  };\n\n  const nameInputClasses = nameInputIsInvalid\n    ? 'form-control invalid'\n    : 'form-control';\n\n\n    // fetch('https://jsonplaceholder.typicode.com/todos/1')\n    // .then(response => response.json())\n    // .then(json => console.log(json))\n\n\n   \n\n\n  return ( <>\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Title</label>\n        <input\n          type='text'\n          id='name'\n          onChange={nameInputChangeHandler}\n          onBlur={nameInputBlurHandler}\n          value={enteredName}\n        />\n        {nameInputIsInvalid && (\n          <p className='error-text'>Title must not be empty.</p>\n        )}\n      </div>\n\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Body</label>\n        <input\n          type='text'\n          id='name'\n          onChange={BodyInputChangeHandler}\n          onBlur={BodyInputBlurHandler}\n          value={enteredBody}\n        />\n        {BodyInputIsInvalid && (\n          <p className='error-text'>Body must not be empty.</p>\n        )}\n      </div>\n\n\n      <div className='form-actions' style={{borderBottom: '2px solid green'}}>\n        <button disabled={!formIsValid} style={{marginBottom: '23%'}}>Submit</button>\n      </div>\n    </form>\n\n    <div style={{marginLeft:'13%',display:'flex',justifyContent: 'space-around',paddingTop: '3em'}}>\n<ListPopulate \nprop={enteredObject}\n></ListPopulate>\n<Emap></Emap>\n</div>\n\n    </>\n  );\n};\n\nexport default FormControl;\n"]},"metadata":{},"sourceType":"module"}
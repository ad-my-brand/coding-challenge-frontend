{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hp\\\\Desktop\\\\coding-challenge-frontend\\\\sanjeetapp\\\\src\\\\components\\\\FormControl.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FormControl = props => {\n  _s();\n\n  const [enteredName, setEnteredName] = useState('');\n  const [enteredBody, setEnteredBody] = useState('');\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const [enteredBodyTouched, setEnteredBodyTouched] = useState(false);\n  const enteredNameIsValid = enteredName.trim() !== '';\n  const enteredBodyIsValid = enteredBody.trim() !== '';\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const BodyInputIsInvalid = !enteredBodyIsValid && enteredBodyTouched;\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredBodyIsValid) {\n    formIsValid = true;\n  }\n\n  const enteredObject = {\n    title: enteredName,\n    body: enteredBody\n  };\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n  };\n\n  const BodyInputChangeHandler = event => {\n    setEnteredBody(event.target.value);\n  };\n\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true);\n  };\n\n  const BodyInputBlurHandler = event => {\n    setEnteredBodyTouched(true);\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n    setEnteredBodyTouched(true);\n\n    if (!(enteredNameIsValid && enteredBodyIsValid)) {\n      return;\n    }\n\n    console.log(enteredName); // nameInputRef.current.value = ''; => NOT IDEAL, DON'T MANIPULATE THE DOM\n\n    setEnteredName('');\n    setEnteredBody('');\n    setEnteredNameTouched(false);\n    setEnteredBodyTouched(false);\n    console.log(enteredObject.title);\n  };\n\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Title must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Body\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: BodyInputChangeHandler,\n        onBlur: BodyInputBlurHandler,\n        value: enteredBody\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), BodyInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Body must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FormControl, \"/TRqbalawb7xy4XCGgMHupiphIw=\");\n\n_c = FormControl;\nexport default FormControl;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormControl\");","map":{"version":3,"sources":["C:/Users/Hp/Desktop/coding-challenge-frontend/sanjeetapp/src/components/FormControl.js"],"names":["useState","FormControl","props","enteredName","setEnteredName","enteredBody","setEnteredBody","enteredNameTouched","setEnteredNameTouched","enteredBodyTouched","setEnteredBodyTouched","enteredNameIsValid","trim","enteredBodyIsValid","nameInputIsInvalid","BodyInputIsInvalid","formIsValid","enteredObject","title","body","nameInputChangeHandler","event","target","value","BodyInputChangeHandler","nameInputBlurHandler","BodyInputBlurHandler","formSubmissionHandler","preventDefault","console","log","nameInputClasses"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACO,kBAAD,EAAqBC,qBAArB,IAA8CR,QAAQ,CAAC,KAAD,CAA5D;AACA,QAAM,CAACS,kBAAD,EAAqBC,qBAArB,IAA8CV,QAAQ,CAAC,KAAD,CAA5D;AAEA,QAAMW,kBAAkB,GAAGR,WAAW,CAACS,IAAZ,OAAuB,EAAlD;AACA,QAAMC,kBAAkB,GAAGR,WAAW,CAACO,IAAZ,OAAuB,EAAlD;AACA,QAAME,kBAAkB,GAAG,CAACH,kBAAD,IAAuBJ,kBAAlD;AACA,QAAMQ,kBAAkB,GAAG,CAACF,kBAAD,IAAuBJ,kBAAlD;AAEA,MAAIO,WAAW,GAAG,KAAlB;;AAEA,MAAIL,kBAAkB,IAAIE,kBAA1B,EAA8C;AAC5CG,IAAAA,WAAW,GAAG,IAAd;AACD;;AAED,QAAMC,aAAa,GAAG;AACpBC,IAAAA,KAAK,EAAGf,WADY;AAEpBgB,IAAAA,IAAI,EAAGd;AAFa,GAAtB;;AAKA,QAAMe,sBAAsB,GAAIC,KAAD,IAAW;AACxCjB,IAAAA,cAAc,CAACiB,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;AACD,GAFD;;AAGA,QAAMC,sBAAsB,GAAIH,KAAD,IAAW;AACxCf,IAAAA,cAAc,CAACe,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;AACD,GAFD;;AAIA,QAAME,oBAAoB,GAAIJ,KAAD,IAAW;AACtCb,IAAAA,qBAAqB,CAAC,IAAD,CAArB;AACD,GAFD;;AAIA,QAAMkB,oBAAoB,GAAIL,KAAD,IAAW;AACtCX,IAAAA,qBAAqB,CAAC,IAAD,CAArB;AACD,GAFD;;AAIA,QAAMiB,qBAAqB,GAAIN,KAAD,IAAW;AACvCA,IAAAA,KAAK,CAACO,cAAN;AAEApB,IAAAA,qBAAqB,CAAC,IAAD,CAArB;AACAE,IAAAA,qBAAqB,CAAC,IAAD,CAArB;;AAEA,QAAI,EAAEC,kBAAkB,IAAIE,kBAAxB,CAAJ,EAAiD;AAC/C;AACD;;AAEDgB,IAAAA,OAAO,CAACC,GAAR,CAAY3B,WAAZ,EAVuC,CAYvC;;AACAC,IAAAA,cAAc,CAAC,EAAD,CAAd;AACAE,IAAAA,cAAc,CAAC,EAAD,CAAd;AACAE,IAAAA,qBAAqB,CAAC,KAAD,CAArB;AACAE,IAAAA,qBAAqB,CAAC,KAAD,CAArB;AAEAmB,IAAAA,OAAO,CAACC,GAAR,CAAYb,aAAa,CAACC,KAA1B;AACD,GAnBD;;AAqBA,QAAMa,gBAAgB,GAAGjB,kBAAkB,GACvC,sBADuC,GAEvC,cAFJ;AAQA,sBACE;AAAM,IAAA,QAAQ,EAAEa,qBAAhB;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEI,gBAAhB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,EAAE,EAAC,MAFL;AAGE,QAAA,QAAQ,EAAEX,sBAHZ;AAIE,QAAA,MAAM,EAAEK,oBAJV;AAKE,QAAA,KAAK,EAAEtB;AALT;AAAA;AAAA;AAAA;AAAA,cAFF,EASGW,kBAAkB,iBACjB;AAAG,QAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAeE;AAAK,MAAA,SAAS,EAAEiB,gBAAhB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,EAAE,EAAC,MAFL;AAGE,QAAA,QAAQ,EAAEP,sBAHZ;AAIE,QAAA,MAAM,EAAEE,oBAJV;AAKE,QAAA,KAAK,EAAErB;AALT;AAAA;AAAA;AAAA;AAAA,cAFF,EASGU,kBAAkB,iBACjB;AAAG,QAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAfF,eA8BE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACE;AAAQ,QAAA,QAAQ,EAAE,CAACC,WAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YA9BF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoCD,CAtGD;;GAAMf,W;;KAAAA,W;AAwGN,eAAeA,WAAf","sourcesContent":["import { useState } from 'react';\n\nconst FormControl = (props) => {\n  const [enteredName, setEnteredName] = useState('');\n  const [enteredBody, setEnteredBody] = useState('');\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const [enteredBodyTouched, setEnteredBodyTouched] = useState(false);\n\n  const enteredNameIsValid = enteredName.trim() !== '';\n  const enteredBodyIsValid = enteredBody.trim() !== '';\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const BodyInputIsInvalid = !enteredBodyIsValid && enteredBodyTouched;\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredBodyIsValid) { \n    formIsValid = true;\n  }\n\n  const enteredObject = {\n    title : enteredName,\n    body : enteredBody\n  }\n\n  const nameInputChangeHandler = (event) => {\n    setEnteredName(event.target.value);\n  };\n  const BodyInputChangeHandler = (event) => {\n    setEnteredBody(event.target.value);\n  };\n\n  const nameInputBlurHandler = (event) => {\n    setEnteredNameTouched(true);\n  };\n\n  const BodyInputBlurHandler = (event) => {\n    setEnteredBodyTouched(true);\n  };\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n\n    setEnteredNameTouched(true);\n    setEnteredBodyTouched(true);\n\n    if (!(enteredNameIsValid && enteredBodyIsValid)) {\n      return;\n    }\n\n    console.log(enteredName);\n\n    // nameInputRef.current.value = ''; => NOT IDEAL, DON'T MANIPULATE THE DOM\n    setEnteredName('');\n    setEnteredBody('');\n    setEnteredNameTouched(false);\n    setEnteredBodyTouched(false);\n\n    console.log(enteredObject.title)\n  };\n\n  const nameInputClasses = nameInputIsInvalid\n    ? 'form-control invalid'\n    : 'form-control';\n\n\n   \n\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Title</label>\n        <input\n          type='text'\n          id='name'\n          onChange={nameInputChangeHandler}\n          onBlur={nameInputBlurHandler}\n          value={enteredName}\n        />\n        {nameInputIsInvalid && (\n          <p className='error-text'>Title must not be empty.</p>\n        )}\n      </div>\n\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Body</label>\n        <input\n          type='text'\n          id='name'\n          onChange={BodyInputChangeHandler}\n          onBlur={BodyInputBlurHandler}\n          value={enteredBody}\n        />\n        {BodyInputIsInvalid && (\n          <p className='error-text'>Body must not be empty.</p>\n        )}\n      </div>\n\n\n      <div className='form-actions'>\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default FormControl;\n"]},"metadata":{},"sourceType":"module"}
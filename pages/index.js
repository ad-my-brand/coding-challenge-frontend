import Head from 'next/head'
import { useEffect, useState } from 'react'
import toast, { Toaster } from 'react-hot-toast'
import Map from '../components/Map';
import styles from '../styles/Home.module.css'


export default function Home() {
  const [userError, setUserError] = useState('');
  const [titleError, setTitleError] = useState('');
  const [bodyError, setBodyError] = useState('');
  const [loading, setLoading] = useState(true);
  const [users, setUsers] = useState([]);
  const [userLocation, setUserLocation] = useState([]);

  useEffect(() => {
    fetch('https://jsonplaceholder.typicode.com/users')
      .then(res => res.json())
      .then(data => {
        setUsers(data)
        setLoading(false)
      })
      .catch(error => setUserError("User Data Not Loaded. Please Refresh"))
  }, [])


  const handleSubmit = event => {
    setUserError('');
    setTitleError('');
    setBodyError('');
    event.preventDefault();
    const form = event.target;
    const title = form.title.value;
    const body = form.body.value;
    const userId = parseInt(form.userId.value)
    if (userId === 0) {
      setUserError('Please Select A User')
      return;
    }
    if (!title) {
      setTitleError('Title is Empty')
      return;
    }
    if (!body) {
      setBodyError('Body Is Empty')
      return;
    }

    const postObj = {
      title,
      body,
      userId
    }

    fetch('https://jsonplaceholder.typicode.com/posts', {
      method: 'POST',
      headers: {
        'Content-type': 'application/json; charset=UTF-8'
      },
      body: JSON.stringify(postObj)
    })
      .then(res => res.json())
      .then(data => {
        console.log(data)
        form.reset();
        toast.success('Post Added Successfully!');

      })
      .catch(error => toast.error("Post Did Not Add Successfully"))
  }

  const handleUserLoaction = event => {
    const userId = event.target.value;
    const selectedUser = users.find(user => user.id === parseInt(userId))
    const position = [parseFloat(selectedUser.address.geo.lng), parseFloat(selectedUser.address.geo.lat)]
    setUserLocation(position)
  }

  if (loading) {
    return <button className="btn loading">loading</button>;
  }

  return (
    <div data-theme="pastel" className={styles.container}>
      <Toaster
        position="top-center"
        reverseOrder={false}
      />
      <Head>
        <title>Code Challenge by Sakib</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="hero min-h-screen bg-base-200">
        <div className="hero-content flex-col-reverse lg:flex-row-reverse">
          <div className="text-center lg:text-left">
            <h1 className="text-5xl font-bold my-6">Map of the User You selected:</h1>
            {userLocation.length !== 0 ? <Map alt="User's Location" userLocation={userLocation}></Map> : <p alt='No User Is Selected'>No User Is Selected</p>}
          </div>
          <div className="card flex-shrink-0 w-full max-w-sm shadow-2xl bg-base-100">
            <form onSubmit={handleSubmit} className="card-body">
              <div className="form-control">
                <label className="label">
                  <span className="label-text">Select Your User</span>
                </label>
                <select alt='Select User From Below' defaultValue='0' onChange={handleUserLoaction} name="userId" className="select select-primary w-full max-w-xs">
                  <option disabled value='0' > -- Select from below -- </option>
                  {
                    users.map(user => <option alt={user.name} key={user.id} value={user.id}>{user.name}</option>)
                  }
                </select>
                {userError && <h2 className='text-error my-5'>{userError}</h2>}
              </div>
              <div className="form-control">
                <label className="label">
                  <span className="label-text">Title</span>
                </label>
                <textarea alt='title' name="title" className="textarea textarea-primary" placeholder="title"></textarea>
                {titleError && <h2 className='text-error my-5'>{titleError}</h2>}
              </div>
              <div className="form-control">
                <label className="label">
                  <span className="label-text">Body</span>
                </label>
                <textarea alt='body' name="body" className="textarea textarea-primary" placeholder="body"></textarea>
                {bodyError && <h2 className='text-error my-5'>{bodyError}</h2>}
              </div>
              <div className="form-control mt-6">
                <button alt='submit' type='submit' className="btn btn-primary">Submit</button>
              </div>
            </form>
          </div>
        </div>
      </div >
    </div >
  )
}
